{"version":3,"file":"static/js/643.bcdacb83.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","components/RegisterForm/RegisterForm.jsx","components/Error/Error.styled.js","components/Error/Error.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem/ContactListItem.styled.js","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","pages/Register/Register.jsx"],"sourcesContent":["import { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useDispatch } from 'react-redux';\n\nimport { logIn } from 'redux/auth/operations';\n\nimport {\n  StyledForm,\n  StyledFormField,\n  StyledLabel,\n  StyledInput,\n  StyledButton,\n  StyledErrorMessage,\n} from 'components/SharedLayout/SharedLayout.styled';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst emailRegex =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst formSchema = Yup.object().shape({\n  email: Yup.string()\n    .trim()\n    .matches(emailRegex, {\n      message: 'Email is invalid.',\n    })\n    .required('Email is a required field'),\n\n  password: Yup.string().trim().required('Password is a required field'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={formSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <StyledFormField>\n          <StyledLabel>Email</StyledLabel>\n          <StyledInput type=\"email\" name=\"email\" />\n          <StyledErrorMessage name=\"email\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledFormField>\n          <StyledLabel>Password</StyledLabel>\n          <StyledInput type=\"password\" name=\"password\" />\n          <StyledErrorMessage name=\"password\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledButton type=\"submit\">Log in</StyledButton>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useDispatch } from 'react-redux';\n\nimport { register } from 'redux/auth/operations';\n\nimport {\n  StyledForm,\n  StyledFormField,\n  StyledLabel,\n  StyledInput,\n  StyledButton,\n  StyledErrorMessage,\n} from 'components/SharedLayout/SharedLayout.styled';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst emailRegex =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(nameRegex, {\n      message:\n        \"Invalid name. Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\",\n    })\n    .required('Name is a required field'),\n\n  email: Yup.string()\n    .trim()\n    .matches(emailRegex, {\n      message: 'Email is invalid',\n    })\n    .required('Email is a required field'),\n\n  password: Yup.string().trim().min(7).required('Password is a required field'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={formSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <StyledFormField>\n          <StyledLabel>Name</StyledLabel>\n          <StyledInput type=\"text\" name=\"name\" />\n          <StyledErrorMessage name=\"name\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledFormField>\n          <StyledLabel>Email</StyledLabel>\n          <StyledInput type=\"email\" name=\"email\" />\n          <StyledErrorMessage name=\"email\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledFormField>\n          <StyledLabel>Password</StyledLabel>\n          <StyledInput type=\"password\" name=\"password\" />\n          <StyledErrorMessage name=\"password\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledButton type=\"submit\">Register</StyledButton>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledError = styled.p`\nfont-size: ${({ theme }) => theme.fontSizes.large};\ntext-align: center;\ncolor: ${({ theme }) => theme.colors.errorColor};\n`;\n","import { StyledError } from './Error.styled';\n\nexport const Error = ({ error }) => {\n  return <StyledError>{error}</StyledError>;\n};\n","import { Formik } from 'formik';\nimport { Notify } from 'notiflix';\nimport * as Yup from 'yup';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport {\n  StyledForm,\n  StyledFormField,\n  StyledLabel,\n  StyledInput,\n  StyledButton,\n  StyledErrorMessage,\n} from 'components/SharedLayout/SharedLayout.styled';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst numberRegex = /^\\+?(\\d{1,2})?[-.\\s]?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}$/;\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(nameRegex, {\n      message:\n        \"Invalid name. Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\",\n    })\n    .required('Name is a required field'),\n\n  number: Yup.string()\n    .trim()\n    .matches(numberRegex, {\n      message:\n        'Invalid number. Phone number must be digits and can contain spaces, dashes, parentheses and can start with +. For example: (123) 456-7890, 123-456-7890, 123.456.7890, 1234567890, +91 (123) 456-7890',\n    })\n    .required('Number is a required field'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    // const normalizedName = contacts.find(contact =>\n    //   contact.name.toLowerCase().includes(values.name.toLowerCase())\n    // );\n    // if (normalizedName) {\n    //   return Notify.info(`${values.name} is already in contacts!`);\n    // }\n\n    const normalizedName = values.name.toLowerCase();\n    const nameExists = contacts.find(\n      ({ name }) => name.toLowerCase() === normalizedName\n    );\n    if (nameExists) {\n      return Notify.info(`${values.name} is already in contacts!`);\n    }\n\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={formSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <StyledFormField>\n          <StyledLabel>Name</StyledLabel>\n          <StyledInput type=\"text\" name=\"name\" />\n          <StyledErrorMessage name=\"name\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledFormField>\n          <StyledLabel>Number</StyledLabel>\n          <StyledInput type=\"tel\" name=\"number\" />\n          <StyledErrorMessage name=\"number\" component=\"div\" />\n        </StyledFormField>\n        <StyledButton type=\"submit\">Add contacts</StyledButton>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nimport { Button } from 'components/SharedLayout/SharedLayout.styled';\n\nexport const StyledContactListItem = styled.li`\ndisplay: flex;\njustify-content: space-between;\ngap: ${({ theme }) => theme.spacing(3)};\nborder: ${({ theme }) => `1px solid ${theme.colors.borderInputColor}`};\nborder-radius: ${({ theme }) => theme.spacing(2)};\npadding: 8px 16px;\n`;\n\nexport const StyledName = styled.p`\nfont-weight: 500;\n`;\n\nexport const StyledButton = styled(Button)`\ndisplay: flex;\njustify-content: 'center';\nalign-items: center;\nborder-radius: 50%;\n`;\n","import PropTypes from 'prop-types';\nimport { MdOutlineDeleteOutline } from 'react-icons/md';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport {\n  StyledContactListItem,\n  StyledName,\n  StyledButton,\n} from './ContactListItem.styled';\n\nexport const ContactListItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <StyledContactListItem>\n      <StyledName>{name}:</StyledName>\n      <p> {number} </p>\n      <StyledButton type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        <MdOutlineDeleteOutline />\n      </StyledButton>\n    </StyledContactListItem>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledContacts = styled.ul`\nwidth: 400px;\ndisplay: flex;\ngap: ${({ theme }) => theme.spacing(3)};\nflex-direction: column;\npadding: ${({ theme }) => theme.spacing(3)};\nborder: ${({ theme }) => `1px solid ${theme.colors.backgroundAndBorderColor}`};\nborder-radius: ${({ theme }) => theme.spacing(2)};\nmargin-left: auto;\nmargin-right: auto;\nmargin-bottom: ${({ theme }) => theme.spacing(5)};\n`;\n\nexport const StyledFormField = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: ${({ theme }) => theme.spacing(1)};\n`;\n","import PropTypes from 'prop-types';\n\nimport { useContacts } from 'hooks';\nimport { ContactListItem } from './ContactListItem';\n\nimport { StyledContacts } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useContacts();\n\n  return (\n    <StyledContacts>\n      {contacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </StyledContacts>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string.isRequired }).isRequired\n  ),\n};\n","import styled from 'styled-components';\n\nexport const StyledFilter = styled.label`\ndisplay: flex;\ngap: ${({ theme }) => theme.spacing(2)};\nalign-items: center;\nwidth: 400px;\ncolor: ${({ theme }) => theme.colors.primaryTextColor};\nmargin-left: auto;\nmargin-right: auto;\nmargin-bottom: ${({ theme }) => theme.spacing(3)};\n`;\n\n\nexport const StyledInput = styled.input`\npadding: 8px 16px;\nborder: ${({ theme }) => `1px solid ${theme.colors.borderInputColor}`};\nborder-radius: ${({ theme }) => theme.spacing(2)};\ntransition-property: border;\ntransition: ${({ theme }) => `border ${theme.colors.transition}`};\n\n:focus {\noutline: none;\nborder: ${({ theme }) => `1px solid ${theme.colors.accentColor}`};\n}\n`;\n","import { DebounceInput } from 'react-debounce-input';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport { setFilterValue } from 'redux/contacts/filterSlice';\n// import { setFilterValue } from 'redux/actions';\n\nimport { StyledFilter, StyledInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilterChange = e => dispatch(setFilterValue(e.target.value));\n\n  return (\n    <StyledFilter>\n      Find contacts by name\n      <DebounceInput\n        element={StyledInput}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        minLength={2}\n        debounceTimeout={300}\n        onChange={handleFilterChange}\n      />\n    </StyledFilter>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const StyledNotification = styled.p`\nfont-size: ${({ theme }) => theme.fontSizes.large};\ntext-align: center;\n`;\n","import PropTypes from 'prop-types';\nimport { StyledNotification } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return <StyledNotification>{message}</StyledNotification>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { Error, Loader } from 'components';\nimport { Container, Section } from 'components/App/App.styled';\nimport { RegisterForm } from 'components/RegisterForm';\nimport { useAuth } from 'hooks';\n\nconst Register = () => {\n  const { isLoading, error } = useAuth();\n\n  return (\n    <Section>\n      <Container>\n        <h1>Registration</h1>\n        <RegisterForm />\n        {isLoading && <Loader />}\n        {error && (\n          <b>\n            <Error error={error} />\n          </b>\n        )}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Register;\n"],"names":["initialValues","email","password","formSchema","Yup","shape","trim","matches","message","required","LoginForm","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","logIn","type","name","component","min","RegisterForm","register","StyledError","styled","theme","fontSizes","large","colors","errorColor","Error","error","number","ContactForm","contacts","useSelector","selectContacts","normalizedName","toLowerCase","find","Notify","addContact","StyledContactListItem","spacing","borderInputColor","StyledName","StyledButton","Button","ContactListItem","contact","id","onClick","deleteContact","StyledContacts","backgroundAndBorderColor","ContactList","useContacts","map","StyledFilter","primaryTextColor","StyledInput","transition","accentColor","Filter","filter","selectFilter","DebounceInput","element","value","minLength","debounceTimeout","onChange","e","setFilterValue","target","StyledNotification","Notification","useAuth","isLoading"],"sourceRoot":""}