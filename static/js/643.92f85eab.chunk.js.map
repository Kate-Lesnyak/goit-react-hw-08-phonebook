{"version":3,"file":"static/js/643.92f85eab.chunk.js","mappings":"uOAqBMA,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KACHG,OACAC,QARa,yHAQM,CAClBC,QACE,0JAEHC,SAAS,4BAEZC,MAAOP,EAAAA,KACJG,OACAC,QAbH,yJAauB,CACnBC,QAAS,sBAEVC,SAAS,6BAEZE,SAAUR,EAAAA,KAAaG,OAAOM,IAAI,GAAGH,SAAS,kCAGnCI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,SAAC,KAAD,CACEC,cAAe,CAAEX,KAAM,GAAIK,MAAO,GAAIC,SAAU,IAChDM,iBAAkBf,EAClBgB,SATiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BN,GAASO,EAAAA,EAAAA,IAASF,IAClBC,GACD,EAGC,UAKE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,oBACA,SAAC,KAAD,CAAaE,KAAK,OAAOjB,KAAK,UAC9B,SAAC,KAAD,CAAoBA,KAAK,OAAOkB,UAAU,YAG5C,UAAC,KAAD,YACE,SAAC,KAAD,qBACA,SAAC,KAAD,CAAaD,KAAK,QAAQjB,KAAK,WAC/B,SAAC,KAAD,CAAoBA,KAAK,QAAQkB,UAAU,YAG7C,UAAC,KAAD,YACE,SAAC,KAAD,wBACA,SAAC,KAAD,CAAaD,KAAK,WAAWjB,KAAK,cAClC,SAAC,KAAD,CAAoBA,KAAK,WAAWkB,UAAU,YAGhD,SAAC,KAAD,CAAcD,KAAK,SAAnB,0BAIP,C,gEC/DD,UAXiB,WACf,OACE,SAAC,IAAD,WACE,UAAC,IAAD,YACE,0CACA,SAAC,IAAD,QAIP,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useDispatch } from 'react-redux';\n\nimport { register } from 'redux/auth/operations';\n\nimport {\n  StyledForm,\n  StyledFormField,\n  StyledLabel,\n  StyledInput,\n  StyledButton,\n  StyledErrorMessage,\n} from 'components/SharedLayout/SharedLayout.styled';\n\nconst nameRegex = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst emailRegex =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nconst formSchema = Yup.object().shape({\n  name: Yup.string()\n    .trim()\n    .matches(nameRegex, {\n      message:\n        \"Invalid name. Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\",\n    })\n    .required('Name is a required field'),\n\n  email: Yup.string()\n    .trim()\n    .matches(emailRegex, {\n      message: 'Email is invalid.',\n    })\n    .required('Email is a required field'),\n\n  password: Yup.string().trim().min(7).required('Password is a required field'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      validationSchema={formSchema}\n      onSubmit={handleSubmit}\n    >\n      <StyledForm>\n        <StyledFormField>\n          <StyledLabel>Name</StyledLabel>\n          <StyledInput type=\"text\" name=\"name\" />\n          <StyledErrorMessage name=\"name\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledFormField>\n          <StyledLabel>Email</StyledLabel>\n          <StyledInput type=\"email\" name=\"email\" />\n          <StyledErrorMessage name=\"email\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledFormField>\n          <StyledLabel>Password</StyledLabel>\n          <StyledInput type=\"password\" name=\"password\" />\n          <StyledErrorMessage name=\"password\" component=\"div\" />\n        </StyledFormField>\n\n        <StyledButton type=\"submit\">Register</StyledButton>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { Container, Section } from 'components/App/App.styled';\nimport { RegisterForm } from 'components/RegisterForm';\n\nconst Register = () => {\n  return (\n    <Section>\n      <Container>\n        <h1>Registration</h1>\n        <RegisterForm />\n      </Container>\n    </Section>\n  );\n};\n\nexport default Register;\n"],"names":["formSchema","Yup","shape","name","trim","matches","message","required","email","password","min","RegisterForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","register","type","component"],"sourceRoot":""}